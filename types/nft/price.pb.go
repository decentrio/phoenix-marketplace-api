// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: nft/price.proto

package nft

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PriceHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Nid           string                 `protobuf:"bytes,2,opt,name=nid,proto3" json:"nid,omitempty"`
	Price         uint64                 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	Token         string                 `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	TxTime        uint64                 `protobuf:"varint,5,opt,name=tx_time,json=txTime,proto3" json:"tx_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceHistory) Reset() {
	*x = PriceHistory{}
	mi := &file_nft_price_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceHistory) ProtoMessage() {}

func (x *PriceHistory) ProtoReflect() protoreflect.Message {
	mi := &file_nft_price_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceHistory.ProtoReflect.Descriptor instead.
func (*PriceHistory) Descriptor() ([]byte, []int) {
	return file_nft_price_proto_rawDescGZIP(), []int{0}
}

func (x *PriceHistory) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *PriceHistory) GetNid() string {
	if x != nil {
		return x.Nid
	}
	return ""
}

func (x *PriceHistory) GetPrice() uint64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PriceHistory) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PriceHistory) GetTxTime() uint64 {
	if x != nil {
		return x.TxTime
	}
	return 0
}

type PriceHistoryInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     uint64                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price         float32                `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceHistoryInfo) Reset() {
	*x = PriceHistoryInfo{}
	mi := &file_nft_price_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceHistoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceHistoryInfo) ProtoMessage() {}

func (x *PriceHistoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nft_price_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceHistoryInfo.ProtoReflect.Descriptor instead.
func (*PriceHistoryInfo) Descriptor() ([]byte, []int) {
	return file_nft_price_proto_rawDescGZIP(), []int{1}
}

func (x *PriceHistoryInfo) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PriceHistoryInfo) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type PriceHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NftId         string                 `protobuf:"bytes,1,opt,name=nft_id,json=nftId,proto3" json:"nft_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceHistoryRequest) Reset() {
	*x = PriceHistoryRequest{}
	mi := &file_nft_price_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceHistoryRequest) ProtoMessage() {}

func (x *PriceHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nft_price_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceHistoryRequest.ProtoReflect.Descriptor instead.
func (*PriceHistoryRequest) Descriptor() ([]byte, []int) {
	return file_nft_price_proto_rawDescGZIP(), []int{2}
}

func (x *PriceHistoryRequest) GetNftId() string {
	if x != nil {
		return x.NftId
	}
	return ""
}

type PriceHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PriceHistory  []*PriceHistoryInfo    `protobuf:"bytes,1,rep,name=price_history,json=priceHistory,proto3" json:"price_history,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceHistoryResponse) Reset() {
	*x = PriceHistoryResponse{}
	mi := &file_nft_price_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceHistoryResponse) ProtoMessage() {}

func (x *PriceHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nft_price_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceHistoryResponse.ProtoReflect.Descriptor instead.
func (*PriceHistoryResponse) Descriptor() ([]byte, []int) {
	return file_nft_price_proto_rawDescGZIP(), []int{3}
}

func (x *PriceHistoryResponse) GetPriceHistory() []*PriceHistoryInfo {
	if x != nil {
		return x.PriceHistory
	}
	return nil
}

type Volume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Nid           string                 `protobuf:"bytes,2,opt,name=nid,proto3" json:"nid,omitempty"`
	Collection    string                 `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
	Amount        uint64                 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Volume        uint64                 `protobuf:"varint,5,opt,name=volume,proto3" json:"volume,omitempty"`
	Token         string                 `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Volume) Reset() {
	*x = Volume{}
	mi := &file_nft_price_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_nft_price_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_nft_price_proto_rawDescGZIP(), []int{4}
}

func (x *Volume) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Volume) GetNid() string {
	if x != nil {
		return x.Nid
	}
	return ""
}

func (x *Volume) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *Volume) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Volume) GetVolume() uint64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Volume) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Bid struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          string                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	AuctionId     string                 `protobuf:"bytes,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bidder        string                 `protobuf:"bytes,3,opt,name=bidder,proto3" json:"bidder,omitempty"`
	BidAmount     uint64                 `protobuf:"varint,4,opt,name=bid_amount,json=bidAmount,proto3" json:"bid_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bid) Reset() {
	*x = Bid{}
	mi := &file_nft_price_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bid) ProtoMessage() {}

func (x *Bid) ProtoReflect() protoreflect.Message {
	mi := &file_nft_price_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bid.ProtoReflect.Descriptor instead.
func (*Bid) Descriptor() ([]byte, []int) {
	return file_nft_price_proto_rawDescGZIP(), []int{5}
}

func (x *Bid) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Bid) GetAuctionId() string {
	if x != nil {
		return x.AuctionId
	}
	return ""
}

func (x *Bid) GetBidder() string {
	if x != nil {
		return x.Bidder
	}
	return ""
}

func (x *Bid) GetBidAmount() uint64 {
	if x != nil {
		return x.BidAmount
	}
	return 0
}

var File_nft_price_proto protoreflect.FileDescriptor

var file_nft_price_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x6e, 0x66, 0x74, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x6e, 0x66, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x46, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x2c, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6e, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x66, 0x74, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x14, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x66, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x94, 0x01, 0x0a, 0x06, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x6f, 0x0a, 0x03, 0x42, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69,
	0x64, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x69, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x58, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x66, 0x74, 0x42, 0x0a, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x15, 0x70, 0x68, 0x6f, 0x65,
	0x6e, 0x69, 0x78, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6e, 0x66,
	0x74, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58, 0xaa, 0x02, 0x03, 0x4e, 0x66, 0x74, 0xca, 0x02, 0x03,
	0x4e, 0x66, 0x74, 0xe2, 0x02, 0x0f, 0x4e, 0x66, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x03, 0x4e, 0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_nft_price_proto_rawDescOnce sync.Once
	file_nft_price_proto_rawDescData []byte
)

func file_nft_price_proto_rawDescGZIP() []byte {
	file_nft_price_proto_rawDescOnce.Do(func() {
		file_nft_price_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nft_price_proto_rawDesc), len(file_nft_price_proto_rawDesc)))
	})
	return file_nft_price_proto_rawDescData
}

var file_nft_price_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_nft_price_proto_goTypes = []any{
	(*PriceHistory)(nil),         // 0: nft.PriceHistory
	(*PriceHistoryInfo)(nil),     // 1: nft.PriceHistoryInfo
	(*PriceHistoryRequest)(nil),  // 2: nft.PriceHistoryRequest
	(*PriceHistoryResponse)(nil), // 3: nft.PriceHistoryResponse
	(*Volume)(nil),               // 4: nft.Volume
	(*Bid)(nil),                  // 5: nft.Bid
}
var file_nft_price_proto_depIdxs = []int32{
	1, // 0: nft.PriceHistoryResponse.price_history:type_name -> nft.PriceHistoryInfo
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_nft_price_proto_init() }
func file_nft_price_proto_init() {
	if File_nft_price_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nft_price_proto_rawDesc), len(file_nft_price_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nft_price_proto_goTypes,
		DependencyIndexes: file_nft_price_proto_depIdxs,
		MessageInfos:      file_nft_price_proto_msgTypes,
	}.Build()
	File_nft_price_proto = out.File
	file_nft_price_proto_goTypes = nil
	file_nft_price_proto_depIdxs = nil
}
